<pre class="metadata">
Title: RDF Time Series Snippets
Warning: Not Ready
Shortname: RDF-TS-Snippets
Level: none
Status: LD
Repository: dylanvanassche/rdf-ts-snippets-spec
URL: https://dylanvanassche.github.io/rdf-ts-snippets-spec/
Editor: Gerald Haesendonck
Editor: Dylan Van Assche
Editor: [Pieter Colpaert](https://pietercolpaert.be/#me)
Abstract: This document specifies how time series data with with only a few changing values
  can be described in RDF.
Markup Shorthands: markdown yes, css no
</pre>

# Abstract # {#abstract}

An RDF Time Series Snippet is a segment of data points from a time series dataset, typically used for analysis or visualization.
The specification uses [SPARQL Common Data Types](https://awslabs.github.io/SPARQL-CDTs/spec/latest.html) coined by AWS Lab to encode the data points in a values literal.
The entity can then be used for annotating this snippet, which is a time interval subset of a potentially larger time series.

# Introduction # {#intro}

Sensor observations, positioning data, measurements, mobility information... are commonly published as Time Series data with a timestamp and a value. 
Representing Time Series data in RDF drastically raises the verbosity, as each data point is often given its own identifier, for which a lot of contextual information is repeated on all data points.
With Time Series Snippets, we allow a data publisher to compact the data points in subsets of a Time Series, called the Snippet, by using [SPARQL Common Data Types](https://awslabs.github.io/SPARQL-CDTs/spec/latest.html) such as `cdt:List` and `cdt:Map`.
A first example illustrates the features of a `tss:Snippet`:

<div class="example" id="simple_example_snippet">
```turtle
<snippet/2026-01-01>
  a tss:Snippet;
  tss:points "[
    { "time": "2026-01-01T06:00:00Z"^^xsd:dateTime, "value": "5.4"^^xsd:double, "id": "0"^^xsd:integer},
    { "time": "2026-01-01T06:59:59Z"^^xsd:dateTime, "value": "5.2"^^xsd:double, "id": "1"^^xsd:integer},
    { "time": "2026-01-01T08:00:00Z"^^xsd:dateTime, "value": "5.2"^^xsd:double, "id": "2"^^xsd:integer},
    { "time": "2026-01-01T09:00:00Z"^^xsd:dateTime, "value": "6.1"^^xsd:double, "id": "3"^^xsd:integer},
  ]"^^cdt:List;
  tss:from "2026-01-01T00:00.00Z"^^xsd:dateTime;
  tss:until "2026-01-01T23:59:59Z"^^xsd:dateTime;
  tss:pointType sosa:Observation;
  tss:timePath sosa:resultTime;
  tss:valuePath sosa:hasSimpleResult;
  tss:about [
    sosa:madeBySensor <temp_sensor_1>;
    sosa:observedProperty <temperature>;
  ];
.
```
</div>

The intention of Time Series Snippets is to be a lossless format as, if needed, it can be expanded again. 
Example 1 for example can be expanded to this RDF dataset:

<div class="example" id="simple_example_rdf">
```turtle
<0>
  a sosa:Observation ;
  sosa:madeBySensor <temp_sensor_1> ;
  sosa:hasSimpleResult "5.4"^^xsd:decimal ;
  sosa:observedProperty: <temperature> ;
  sosa:resultTime "2026-01-01T06:00:00Z"^^xsd:dateTime .

<1>
  a sosa:Observation ;
  sosa:madeBySensor <temp_sensor_1> ;
  sosa:hasSimpleResult "5.2"^^xsd:decimal ;
  sosa:observedProperty: <temperature> ;
  sosa:resultTime "2026-01-01T06:59:59Z"^^xsd:dateTime .

<2>
  a sosa:Observation ;
  sosa:madeBySensor <temp_sensor_1> ;
  sosa:hasSimpleResult "5.2"^^xsd:decimal ;
  sosa:observedProperty: <temperature> ;
  sosa:resultTime "2026-01-01T08:00:02Z"^^xsd:dateTime .

<3>
  a sosa:Observation ;
  sosa:madeBySensor <temp_sensor_1> ;
  sosa:hasSimpleResult "6.1"^^xsd:decimal ;
  sosa:observedProperty: <temperature> ;
  sosa:resultTime "2026-01-01T09:00:00Z"^^xsd:dateTime .
```
</div>

# Definitions # {#definitions}

A <dfn>Time Series</dfn> is a set of data points ordered by timestamp, where each data point consists of a timestamp and corresponding value.

A <dfn>Snippet</dfn> describes a subset of a Time Series within a certain period defined by a start and end timestamp, and a description of the entity providing the data points.

A <dfn>Data Point</dfn> is a single point of a Time Series containing an ISO timestamp, a value with datatype, and optionally an identifier.

# Snippet properties # {#properties}

Each Snippet has the following properties:

- `tss:points`: a `cdt:List` of data points where each data point is a `cdt:Map`.
- `tss:from`: starting timestamp (including) of the period covered by `tss:points`.
- `tss:until`: until this timestamp (excluding) of the period covered by `tss:points`.
- `tss:about`: an entity description which provides the data points in `tss:points`.
- `tss:pointType`: the RDF type of the data points in `tss:points`.
- `tss:timePath`: the term to use for expanding the `time` property in `tss:points`.
- `tss:valuePath`: the term to use for expanding the `value` property in `tss:points`.

Issue: Discuss whether these properties are required or optional. E.g., a publisher might decide to do a lossy conversion for their goal, and not include valuePath, pointType and timePath. However, we can still analyze and visualize the data without that information.

## Points ## {#points}

`tss:points` MUST have a `cdt:List` as datatype. Each point itself MUST be a `cdt:Map` consisting
of 2 required properties and 1 optional property:
  - `time`: the `xsd:dateTime` of the data point
  - `value`: the value of the data point with corresponding datatype.
  - `id`: the data point identifier, optionally (must be a named node).

All properties of datapoints are expandable to RDF, the RDF terms to use are defined through the path descriptions of a Snippet.

<div class="example" id="ex_points">
```json
[
    { "time": "2026-01-01T06:00:00Z"^^xsd:dateTime, "value": "5.4"^^xsd:double, "id": "0"^^xsd:integer },
    { "time": "2026-01-01T06:59:59Z"^^xsd:dateTime, "value": "5.2"^^xsd:double, "id": "1"^^xsd:integer },
    { "time": "2026-01-01T08:00:00Z"^^xsd:dateTime, "value": "5.2"^^xsd:double, "id": "2"^^xsd:integer },
    { "time": "2026-01-01T09:00:00Z"^^xsd:dateTime, "value": "6.1"^^xsd:double, "id": "3"^^xsd:integer },
]
```
</div>

Points can have extended values as well such as `cdt:Map` to allow complex values to be included:

<div class="example" id="ex_snippet_advanced_ttl">
```turtle
<snippet/2026-01-01>
  a tss:Snippet;
  tss:points "[
    { 
      "time": "2026-01-01T06:00:00Z",
      "value": "{
        "latitude": "50.000000"^^xsd:double,
        "longitude": "4.000000"^^xsd:double,
        "temperature": "5.21"^^xsd:double
      }"^^cdt:Map
    },
    { 
      "time": "2026-01-01T07:00:00Z",
      "value": "{
        "latitude": "50.100000"^^xsd:double,
        "longitude": "4.100000"^^xsd:double,
        "temperature": "7.61"^^xsd:double
      }"^^cdt:Map
    },
    { 
      "time": "2026-01-01T08:00:00Z",
      "value": "{
        "latitude": "50.200000"^^xsd:double,
        "longitude": "4.200000"^^xsd:double,
        "temperature": "4.21"^^xsd:double
      }"^^cdt:Map
    }
  ]"^^cdt:List;
  tss:from "2026-01-01T00:00.00Z"^^xsd:dateTime;
  tss:until "2026-01-01T23:59:59Z"^^xsd:dateTime;
  tss:pointType sosa:Observation;
  tss:timePath sosa:resultTime;
  tss:valuePath sosa:hasSimpleResult;
  tss:about [
    sosa:madeBySensor <temp_sensor_1>;
    sosa:observedProperty <temperature>;
  ];
.
```
</div>

Issue: this cdt:Map in a cdt:Map proposal is incompatible with paths! A possibility here is to allow the following:

```turtle
<snippet/2026-01-01>
  a tss:Snippet;
  tss:points "[
    { 
      "time": "2026-01-01T06:00:00Z",
      "value": "{
        "latitude": "50.000000"^^xsd:double,
        "longitude": "4.000000"^^xsd:double,
        "temperature": "5.21"^^xsd:double
      }"^^cdt:Map
    },
    { 
      "time": "2026-01-01T07:00:00Z",
      "value": "{
        "latitude": "50.100000"^^xsd:double,
        "longitude": "4.100000"^^xsd:double,
        "temperature": "7.61"^^xsd:double
      }"^^cdt:Map
    },
    { 
      "time": "2026-01-01T08:00:00Z",
      "value": "{
        "latitude": "50.200000"^^xsd:double,
        "longitude": "4.200000"^^xsd:double,
        "temperature": "4.21"^^xsd:double
      }"^^cdt:Map
    }
  ]"^^cdt:List;
  tss:from "2026-01-01T00:00.00Z"^^xsd:dateTime;
  tss:until "2026-01-01T23:59:59Z"^^xsd:dateTime;
  tss:pointType sosa:Observation;
  tss:timePath sosa:resultTime;
  tss:valuePath [ a tss:Path
    tss:path "latitude";
    tss:term geo:latitude;
  ];
  tss:valuePath [ a tss:Path
    tss:path "longitude";
    tss:term geo:longitude;
  ];
  tss:valuePath [ a tss:Path
    tss:path "temperature";
    tss:term sosa:hasSimpleResult;
  ];
  tss:identifierPath dcterms:identifier;
  tss:about [
    sosa:madeBySensor <temp_sensor_1>;
    sosa:observedProperty <temperature>;
  ];
.
```

Specifying the term immediately is a shortcut for defining a full `tss:Path`.
